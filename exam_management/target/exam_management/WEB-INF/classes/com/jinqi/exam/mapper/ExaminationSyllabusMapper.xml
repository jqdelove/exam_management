<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jinqi.exam.dao.ExaminationSyllabusMapper">
    <resultMap id="BaseResultMap" type="com.jinqi.exam.entity.ExaminationSyllabus">
        <id column="EXAMINATION_SYLLABUS_ID" property="examinationSyllabusId" jdbcType="INTEGER"/>
        <result column="COURSE_ID" property="courseId" jdbcType="INTEGER"/>
        <result column="COURSE_NAME" property="courseName"/>
    </resultMap>
  
  <resultMap id="getKnowledgePointses" type="com.jinqi.exam.entity.ExaminationSyllabus" extends="BaseResultMap">
    <!-- 查出大纲包含的知识点   -->
    <collection property="knowledgePointses" ofType="com.jinqi.exam.entity.KnowledgePoints"
                column="TES.EXAMINATION_SYLLABUS_ID"
                javaType="java.util.ArrayList" fetchType="eager"
                select="com.jinqi.exam.mapper.KnowledgePointsMapper.selectByExaminationSyllabusId"/>
  </resultMap>
  
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        EXAMINATION_SYLLABUS_ID, COURSE_ID, KNOWLEDGE_POINTS_ID
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.jinqi.exam.entity.ExaminationSyllabusExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from T_EXAMINATION_SYLLABUS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="getKnowledgePointses" parameterType="java.lang.Integer">
        select TES.EXAMINATION_SYLLABUS_ID,
               TES.COURSE_ID,
               TES.KNOWLEDGE_POINTS_ID,
               TC.COURSE_NAME
        from T_EXAMINATION_SYLLABUS TES
                 left join T_COURSE TC on TES.COURSE_ID = TC.COURSE_ID
        where TES.EXAMINATION_SYLLABUS_ID = #{examinationSyllabusId,jdbcType=INTEGER}
    </select>

    <select id="selectAll" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select TES.EXAMINATION_SYLLABUS_ID, TES.COURSE_ID, TES.KNOWLEDGE_POINTS_ID, TC.COURSE_NAME
        from T_EXAMINATION_SYLLABUS TES
                 left join T_COURSE TC on TES.COURSE_ID = TC.COURSE_ID
                 left join T_TEACHER_COURSE TTC on TC.COURSE_ID = TTC.COURSE_ID
                 left join T_TEACHER TT on TTC.TEACHER_ID = TT.TEACHER_ID
        where TT.TEACHER_ID = #{teacherId}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from T_EXAMINATION_SYLLABUS
        where EXAMINATION_SYLLABUS_ID = #{examinationSyllabusId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.jinqi.exam.entity.ExaminationSyllabusExample">
        delete from T_EXAMINATION_SYLLABUS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.jinqi.exam.entity.ExaminationSyllabus">
        insert into T_EXAMINATION_SYLLABUS (EXAMINATION_SYLLABUS_ID, COURSE_ID)
        values (#{examinationSyllabusId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.jinqi.exam.entity.ExaminationSyllabus">
        insert into T_EXAMINATION_SYLLABUS
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="examinationSyllabusId != null">
                EXAMINATION_SYLLABUS_ID,
            </if>
            <if test="courseId != null">
                COURSE_ID,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="examinationSyllabusId != null">
                #{examinationSyllabusId,jdbcType=INTEGER},
            </if>
            <if test="courseId != null">
                #{courseId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.jinqi.exam.entity.ExaminationSyllabusExample"
            resultType="java.lang.Integer">
        select count(*) from T_EXAMINATION_SYLLABUS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update T_EXAMINATION_SYLLABUS
        <set>
            <if test="record.examinationSyllabusId != null">
                EXAMINATION_SYLLABUS_ID = #{record.examinationSyllabusId,jdbcType=INTEGER},
            </if>
            <if test="record.courseId != null">
                COURSE_ID = #{record.courseId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update T_EXAMINATION_SYLLABUS
        set EXAMINATION_SYLLABUS_ID = #{record.examinationSyllabusId,jdbcType=INTEGER},
        COURSE_ID = #{record.courseId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.jinqi.exam.entity.ExaminationSyllabus">
        update T_EXAMINATION_SYLLABUS
        <set>
            <if test="courseId != null">
                COURSE_ID = #{courseId,jdbcType=INTEGER},
            </if>
        </set>
        where EXAMINATION_SYLLABUS_ID = #{examinationSyllabusId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.jinqi.exam.entity.ExaminationSyllabus">
        update T_EXAMINATION_SYLLABUS
        set COURSE_ID = #{courseId,jdbcType=INTEGER}
        where EXAMINATION_SYLLABUS_ID = #{examinationSyllabusId,jdbcType=INTEGER}
    </update>
    <select resultMap="BaseResultMap" parameterType="com.jinqi.exam.entity.ExaminationSyllabusExample"
            id="selectByExampleWithRowbounds">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from T_EXAMINATION_SYLLABUS
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
</mapper>