<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jinqi.exam.dao.ClazzMapper" >
  <resultMap id="BaseResultMap" type="com.jinqi.exam.entity.Clazz" >
    <id column="CLASS_ID" property="classId" jdbcType="INTEGER" />
    <result column="CLASS_NAME" property="className" jdbcType="VARCHAR" />
    <result column="CLASS_AMOUNT" property="classAmount" jdbcType="INTEGER" />
    <result column="TEACHER_NAME" property="teacherName" />
<!--    <collection property="clazzTeachers" ofType="com.jinqi.exam.entity.ClazzTeacher" column="CLASS_ID"-->
<!--                javaType="java.util.ArrayList" fetchType="lazy" select="com.jinqi.exam.dao.ClazzTeacherMapper.selectByClazzId"/>-->
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    CLASS_ID, CLASS_NAME, CLASS_AMOUNT, TEACHER_NAME
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jinqi.exam.entity.ClazzExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_CLASS
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
      TC.CLASS_ID, TC.CLASS_NAME, TC.CLASS_AMOUNT
    from T_CLASS TC
    where TC.CLASS_ID = #{classId,jdbcType=INTEGER}
  </select>

  <select id="selectByClassId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
      TC.CLASS_ID, TC.CLASS_NAME, TC.CLASS_AMOUNT, TT.TEACHER_NAME
    from T_CLASS TC
           left join T_CLASS_TEACHER TCT on TC.CLASS_ID = TCT.CLASS_ID
           left join T_TEACHER TT on TCT.TEACHER_ID = TT.TEACHER_ID
    where TC.CLASS_ID = #{classId,jdbcType=INTEGER}
  </select>

  <select id="selectAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from T_CLASS
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from T_CLASS
    where CLASS_ID = #{classId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jinqi.exam.entity.ClazzExample" >
    delete from T_CLASS
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jinqi.exam.entity.Clazz" >
    insert into T_CLASS (CLASS_ID, CLASS_NAME, CLASS_AMOUNT
      )
    values (#{classId,jdbcType=INTEGER}, #{className,jdbcType=VARCHAR}, #{classAmount,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jinqi.exam.entity.Clazz" >
    insert into T_CLASS
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="classId != null" >
        CLASS_ID,
      </if>
      <if test="className != null" >
        CLASS_NAME,
      </if>
      <if test="classAmount != null" >
        CLASS_AMOUNT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="className != null" >
        #{className,jdbcType=VARCHAR},
      </if>
      <if test="classAmount != null" >
        #{classAmount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jinqi.exam.entity.ClazzExample" resultType="java.lang.Integer" >
    select count(*) from T_CLASS
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update T_CLASS
    <set >
      <if test="record.classId != null" >
        CLASS_ID = #{record.classId,jdbcType=INTEGER},
      </if>
      <if test="record.className != null" >
        CLASS_NAME = #{record.className,jdbcType=VARCHAR},
      </if>
      <if test="record.classAmount != null" >
        CLASS_AMOUNT = #{record.classAmount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update T_CLASS
    set CLASS_ID = #{record.classId,jdbcType=INTEGER},
      CLASS_NAME = #{record.className,jdbcType=VARCHAR},
      CLASS_AMOUNT = #{record.classAmount,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jinqi.exam.entity.Clazz" >
    update T_CLASS
    <set >
      <if test="className != null" >
        CLASS_NAME = #{className,jdbcType=VARCHAR},
      </if>
      <if test="classAmount != null" >
        CLASS_AMOUNT = #{classAmount,jdbcType=INTEGER},
      </if>
    </set>
    where CLASS_ID = #{classId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jinqi.exam.entity.Clazz" >
    update T_CLASS
    set CLASS_NAME = #{className,jdbcType=VARCHAR},
      CLASS_AMOUNT = #{classAmount,jdbcType=INTEGER}
    where CLASS_ID = #{classId,jdbcType=INTEGER}
  </update>
  <select resultMap="BaseResultMap" parameterType="com.jinqi.exam.entity.ClazzExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_CLASS
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>