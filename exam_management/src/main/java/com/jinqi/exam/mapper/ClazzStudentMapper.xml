<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jinqi.exam.dao.ClazzStudentMapper" >
  <resultMap id="BaseResultMap" type="com.jinqi.exam.entity.ClazzStudent" >
    <id column="CLASS_STUDENT_ID" property="classStudentId" jdbcType="INTEGER" />
    <result column="CLASS_ID" property="classId" jdbcType="INTEGER" />
    <result column="STUDENT_ID" property="studentId" jdbcType="INTEGER" />
    <result column="SCORE_NUMBER" property="scoreNumber" jdbcType="INTEGER"/>
    <association property="student" column="STUDENT_ID" select="com.jinqi.exam.dao.StudentMapper.selectByPrimaryKey"/>
    <association property="clazz" column="CLASS_ID" select="com.jinqi.exam.dao.ClazzMapper.selectByPrimaryKey"/>
  </resultMap>

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    CLASS_STUDENT_ID, CLASS_ID, STUDENT_ID, SCORE_NUMBER
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jinqi.exam.entity.ClazzStudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_CLASS_STUDENT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from T_CLASS_STUDENT
    where CLASS_STUDENT_ID = #{classStudentId,jdbcType=INTEGER}
  </select>

  <select id="selectByClassId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select TC.CLASS_STUDENT_ID, TC.CLASS_ID, TC.STUDENT_ID
    from T_CLASS_STUDENT TC
        left join T_STUDENT TS ON TC.STUDENT_ID = TS.STUDENT_ID
        left join T_CLASS T ON T.CLASS_ID = TC.CLASS_ID
    where TC.CLASS_ID = #{classId}
  </select>

  <select id="selectByClassIdAndCourseId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select TC.CLASS_STUDENT_ID, TC.CLASS_ID, TC.STUDENT_ID, T.SCORE_NUMBER<!--这边查出的字段给上面association的column作为参数-->
    from T_CLASS_STUDENT TC
        left join T_STUDENT TS on TC.STUDENT_ID = TS.STUDENT_ID
        left join T_SCORE T on TC.STUDENT_ID = T.STUDENT_ID
        left join T_COURSE C on T.COURSE_ID = C.COURSE_ID
        left join T_CLASS TC2 on TC.CLASS_ID = TC2.CLASS_ID
    where TC.CLASS_ID = #{classId} and T.COURSE_ID = ${courseId}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from T_CLASS_STUDENT
    where CLASS_STUDENT_ID = #{classStudentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jinqi.exam.entity.ClazzStudentExample" >
    delete from T_CLASS_STUDENT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jinqi.exam.entity.ClazzStudent" >
    insert into T_CLASS_STUDENT (CLASS_STUDENT_ID, CLASS_ID, STUDENT_ID
      )
    values (#{classStudentId,jdbcType=INTEGER}, #{classId,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jinqi.exam.entity.ClazzStudent" >
    insert into T_CLASS_STUDENT
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="classStudentId != null" >
        CLASS_STUDENT_ID,
      </if>
      <if test="classId != null" >
        CLASS_ID,
      </if>
      <if test="studentId != null" >
        STUDENT_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="classStudentId != null" >
        #{classStudentId,jdbcType=INTEGER},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jinqi.exam.entity.ClazzStudentExample" resultType="java.lang.Integer" >
    select count(*) from T_CLASS_STUDENT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update T_CLASS_STUDENT
    <set >
      <if test="record.classStudentId != null" >
        CLASS_STUDENT_ID = #{record.classStudentId,jdbcType=INTEGER},
      </if>
      <if test="record.classId != null" >
        CLASS_ID = #{record.classId,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        STUDENT_ID = #{record.studentId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update T_CLASS_STUDENT
    set CLASS_STUDENT_ID = #{record.classStudentId,jdbcType=INTEGER},
      CLASS_ID = #{record.classId,jdbcType=INTEGER},
      STUDENT_ID = #{record.studentId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jinqi.exam.entity.ClazzStudent" >
    update T_CLASS_STUDENT
    <set >
      <if test="classId != null" >
        CLASS_ID = #{classId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        STUDENT_ID = #{studentId,jdbcType=INTEGER},
      </if>
    </set>
    where CLASS_STUDENT_ID = #{classStudentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jinqi.exam.entity.ClazzStudent" >
    update T_CLASS_STUDENT
    set CLASS_ID = #{classId,jdbcType=INTEGER},
      STUDENT_ID = #{studentId,jdbcType=INTEGER}
    where CLASS_STUDENT_ID = #{classStudentId,jdbcType=INTEGER}
  </update>
  <select resultMap="BaseResultMap" parameterType="com.jinqi.exam.entity.ClazzStudentExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_CLASS_STUDENT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>